version: 2
jobs:
  build:
    docker:
      - image: poanetwork/terraform-prep
    working_directory: ~/deployment-terraform/azure
    environment:
          ANSIBLE_AZURE_AUTH_SOURCE: env
          
    steps:      
      - checkout:
          path: ~/deployment-terraform/

      - run:
          name: Set all.yml config
          command: echo $config_file | base64 --decode > ~/deployment-terraform/azure/group_vars/all.yml

      - run:
          name: set id_rsa.pub
          command: echo $pub_key > ~/deployment-terraform/azure/id_rsa.pub

      - run:
          name: Set unique prefix for this build
          command: echo 'export tf_prefix=tf_$(mkdir -p /tmp/artifacts && mkdir -p ~/deployment-terraform/azure/outputs/ && head /dev/urandom | tr -dc A-Za-z0-9 | head -c 5  | tee /tmp/artifacts/prefix ~/deployment-terraform/azure/outputs/prefix)_' >> $BASH_ENV

      - run:
          name: deploy infra
          command: bash -c "ansible-playbook site.yml -e 'terraform_location=/usr/local/bin/terraform' -e 'backend=true' -e 'tf_prefix=$tf_prefix' $build_attr"
          no_output_timeout: 2000
      
      - run:
          name: Save artifacts
          command: bash -c "ansible-playbook -i ~/deployment-terraform/azure/outputs/latest_deploy_hosts download_outputs.yml -t build -e 'destination=/tmp/artifacts/' -e 'terraform_location=/usr/local/bin/terraform' $build_attr"
      
      - store_artifacts:
          path: /tmp/artifacts

      - persist_to_workspace:
          root: ~/deployment-terraform/azure/outputs/
          paths:
            - latest_deploy_hosts
            - prefix
  
  test:
    docker:
      - image: poanetwork/terraform-prep
    working_directory: ~/deployment-terraform/azure

    steps:      
      - checkout:
          path: ~/deployment-terraform/
          
      - attach_workspace:
          at: /tmp/hosts/
          
      - run:
          name: Fetch pre-defined prefix to environmental variable
          command: "export tf_prefix=tf_$(cat /tmp/hosts/prefix)_"

      - run:
          name: Set all.yml config
          command: echo $config_file | base64 --decode > ~/deployment-terraform/azure/group_vars/all.yml

      - run:
          name: set id_rsa.pub
          command: echo $pub_key > ~/deployment-terraform/azure/id_rsa.pub
      
      - run:
          name: check network
          command: bash -c "ansible-playbook tests.yml -i /tmp/hosts/latest_deploy_hosts -e 'terraform_location=/usr/local/bin/terraform' -e 'tf_prefix=$tf_prefix' -e 'backend=true' $tests_attr"
          
      - run:
          name: Save artifacts
          command: bash -c "ansible-playbook -i /tmp/hosts/latest_deploy_hosts download_outputs.yml -t tests -e 'destination=/tmp/artifacts/' -e 'tf_prefix=$tf_prefix' -e 'terraform_location=/usr/local/bin/terraform' $tests_attr"
  
      - store_artifacts:
          path: /tmp/artifacts

  destroy:
    docker:
      - image: poanetwork/terraform-prep
    working_directory: ~/deployment-terraform/azure
    environment:
          ANSIBLE_AZURE_AUTH_SOURCE: env

    steps:      
      - checkout:
          path: ~/deployment-terraform/
          
      - attach_workspace:
          at: /tmp/hosts/
        
      - run:
          name: Fetch pre-defined prefix to environmental variable
          command: "export tf_prefix=tf_$(cat /tmp/hosts/prefix)_"
          
      - run:
          name: Set all.yml config
          command: echo $config_file | base64 --decode > ~/deployment-terraform/azure/group_vars/all.yml

      - run:
          name: set id_rsa.pub
          command: echo $pub_key > ~/deployment-terraform/azure/id_rsa.pub
          
      - run:
          name: destroy infra
          command: bash -c "ansible-playbook destroy.yml -e 'tf_prefix='$tf_prefix -e 'terraform_location=/usr/local/bin/terraform' -e 'backend=true' -e 'tf_prefix=$tf_prefix' $destroy_attr"
          no_output_timeout: 2000

workflows:
  version: 2
  test_and_destroy:
    jobs:
      - build
      - test:
          requires:
            - build
      - approve_destroy:
          type: approval
      - destroy:
          requires:
            - approve_destroy